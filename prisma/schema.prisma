datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  isAdmin       Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  transactions Transaction[]
  budgets      Budget[]
  categories   Category[]
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Transaction Model
model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  description String?
  date        DateTime        @default(now())
  userId      String
  categoryId  String

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

// Category Model
model Category {
  id     String       @id @default(cuid())
  name   String
  // type   CategoryType
  userId String
  special Boolean @default(false)
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets       Budget[]
}

// Budget Model
model Budget {
  id         String   @id @default(cuid())
  amount     Float
  startDate  DateTime
  endDate    DateTime
  categoryId String?
  userId     String

  user     User      @relation(fields: [userId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
}

// Enums
enum TransactionType {
  INCOME
  EXPENSE
}

enum CategoryType {
  INCOME
  EXPENSE
}
